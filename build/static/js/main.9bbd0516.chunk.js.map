{"version":3,"sources":["components/registrationForm/RegistrationForm.js","components/authorizationForm/AuthorizationForm.js","components/header/Header.js","components/updateFormButton/UpdateFormButton.js","components/task/Task.js","components/createTaskForm/CreateTaskForm.js","components/dropdownFilter/DropdownFilter.js","components/dropdownSort/DropdownSort.js","components/appMenu/AppMenu.js","App.js","serviceWorker.js","index.js"],"names":["RegistrationForm","state","name","password","passwordConfirm","classString","handleNameChange","_this","setState","handlePasswordChange","handlePasswordConfirmChange","postUserData","_callee","_this$state","userData","options","res","regenerator_default","a","wrap","_context","prev","next","method","headers","Accept","Content-Type","body","JSON","stringify","fetch","sent","console","log","stop","this","_this2","react_default","createElement","Modal","trigger","Button","Header","Content","Form","Field","placeholder","onChange","e","target","value","id","type","onClick","Component","AuthorizationForm","className","registrationForm_RegistrationForm","authorizationForm_AuthorizationForm","UpdateFormButton","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getTask","obj","title","text","priority","completed","changeTitleValue","changeDescriptionValue","handleChange","getUpdatedTask","updatedTask","_id","task","updateTask","open","Radio","label","checked","floated","Task","_ref","targetTask","tasks","getTaskId","deleteTask","monthes","map","monthNumber","date","slice","month","concat","Item","key","Icon","color","Description","Extra","Checkbox","updateFormButton_UpdateFormButton","CreateTaskForm","postState","getState","DropdownFilter","getValue","Dropdown","icon","floating","labeled","button","Menu","DropdownSort","changeSortDirection","AppMenu","dropdownFilter_DropdownFilter","dropdownSort_DropdownSort","createTaskForm_CreateTaskForm","App","filteredTasks","fetchData","data","json","postData","_callee2","formData","time","localTime","hours","minutes","days","months","years","_context2","Date","toLocaleDateString","getHours","getMinutes","deleteData","_callee3","_context3","filter","updateData","_callee4","_context4","arguments","length","undefined","tasksCopy","toConsumableArray","filteredTasksCopy","sort","b","reverse","completeChange","forEach","header_Header","appMenu_AppMenu","Group","task_Task","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bbd0516.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './registrationForm.css';\r\nimport { Button, Form, Modal } from 'semantic-ui-react';\r\n\r\nclass RegistrationForm extends Component{\r\n\r\n    state = {\r\n        name: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n        classString: ''\r\n    };\r\n    \r\n    handleNameChange = (name) => this.setState({name});\r\n    handlePasswordChange = (password) => this.setState({password});\r\n    handlePasswordConfirmChange = (passwordConfirm) => this.setState({passwordConfirm});\r\n\r\n    postUserData = async () => {\r\n        const {name, password} = this.state;\r\n        const userData = {\r\n            name,\r\n            password\r\n        } \r\n        const options = {\r\n            method: 'post',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(userData)\r\n        };\r\n        const res = await fetch('http://192.168.0.103:3001/api/user', options);\r\n        console.log(res)\r\n       \r\n    }\r\n\r\n\r\n    /*check = () => {\r\n        const {password, passwordConfirm, classString} = this.state;\r\n        let redClassString;\r\n        if (password !== passwordConfirm) redClassString = classString + ' red';\r\n        console.log(redClassString)\r\n        this.setState({classString: redClassString})\r\n        console.log(this.state.classString)\r\n    } */\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Modal trigger={<Button>Sign Up</Button>} >\r\n            <Modal.Header>Sign Up</Modal.Header>\r\n            <Modal.Content>\r\n                <Form>\r\n                    <Form.Field>\r\n                        <label>Login</label>\r\n                        <input\r\n                            placeholder='Login'\r\n                            onChange={e => this.handleNameChange(e.target.value)}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Password</label>\r\n                        <input\r\n                            placeholder='Password'\r\n                            onChange={e => this.handlePasswordChange(e.target.value)}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Confirm password</label>\r\n                        <input\r\n                            id={this.state.classString}\r\n                            placeholder='Confirm password'\r\n                            onChange={e => this.handlePasswordConfirmChange(e.target.value)}\r\n                        />\r\n                    </Form.Field>\r\n                    <Button\r\n                    type='submit'\r\n                    id='registration-button'\r\n                    onClick={this.postUserData}\r\n                    >Sign Up</Button>\r\n                </Form>\r\n            </Modal.Content>\r\n        </Modal>\r\n   \r\n        )\r\n    }    \r\n   \r\n}\r\n\r\nexport default RegistrationForm ","import React from 'react';\r\nimport './authorizationForm.css';\r\nimport { Button, Form, Modal } from 'semantic-ui-react';\r\n\r\nconst AuthorizationForm = () => (\r\n    <Modal trigger={<Button>Sign In</Button>} >\r\n        <Modal.Header>Sign In</Modal.Header>\r\n        <Modal.Content>\r\n            <Form>\r\n                <Form.Field>\r\n                    <label>Login</label>\r\n                    <input placeholder='Login' />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <label>Password</label>\r\n                    <input placeholder='Password' />\r\n                </Form.Field>\r\n                <Button type='submit' id='authorization-button'>Sign In</Button>\r\n            </Form>\r\n        </Modal.Content>\r\n    </Modal>\r\n)\r\n\r\nexport default AuthorizationForm","import React from 'react';\r\nimport './header.css';\r\nimport RegistrationForm from '../registrationForm/RegistrationForm';\r\nimport AuthorizationForm from '../authorizationForm/AuthorizationForm';\r\n\r\n\r\nconst Header = () => {\r\n    return(\r\n        <header className='header-container'>\r\n            <h3 id='header-title'>TODO List</h3>\r\n            <div id='header-buttons'>\r\n                <RegistrationForm />\r\n                <AuthorizationForm />    \r\n            </div> \r\n        </header>\r\n    )\r\n}; \r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport { Button, Form, Modal, Radio } from 'semantic-ui-react';\r\n\r\nclass UpdateFormButton extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            title: '',\r\n            text: '',\r\n            priority: '',\r\n            completed: false,\r\n            open: false\r\n        }   \r\n    };\r\n    \r\n    getTask = (obj) => {\r\n        const {title, text, priority, completed} = obj;\r\n        this.setState({\r\n            title,\r\n            text,\r\n            priority,\r\n            completed\r\n        })\r\n    };\r\n\r\n    changeTitleValue = title => this.setState({title});\r\n    changeDescriptionValue = text => this.setState({text});\r\n    handleChange = priority =>  this.setState({priority});\r\n   \r\n    getUpdatedTask = () => {\r\n        const {title, text, priority, completed} = this.state;\r\n        const updatedTask = {\r\n            _id: this.props.task._id,\r\n            title,\r\n            text,\r\n            priority,\r\n            completed\r\n        };\r\n        this.props.updateTask(updatedTask)\r\n        this.setState({open: false})\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <Modal trigger={<Button onClick={() => {this.getTask(this.props.task); this.setState({open: true})} }>Edit</Button>} id='createtaskform-container' open={this.state.open}>\r\n                <Modal.Header>Cteate new task</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <label>Title</label>\r\n                            <input\r\n                            onChange={e => this.changeTitleValue(e.target.value)}\r\n                            //placeholder='Title'\r\n                            value={this.state.title}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Description</label>\r\n                            <input\r\n                            onChange={e => this.changeDescriptionValue(e.target.value)}\r\n                            //placeholder='Description'\r\n                            value={this.state.text}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            Select task priority\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='Low'\r\n                            name='radioGroup'\r\n                            value='low'\r\n                            checked={this.state.priority === 'low'}\r\n                            onChange={() => this.handleChange('low')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='Medium'\r\n                            name='radioGroup'\r\n                            value='medium'\r\n                            checked={this.state.priority === 'medium'}\r\n                            onChange={() => this.handleChange('medium')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='High'\r\n                            name='radioGroup'\r\n                            value='high'\r\n                            checked={this.state.priority === 'high'}\r\n                            onChange={() => this.handleChange('high')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Button \r\n                            id='createtask-cancel-button' \r\n                            floated='right'\r\n                            onClick={() => this.setState({open: false})}\r\n                            >Cancel</Button>\r\n                            <Button \r\n                            type='submit' \r\n                            id='createtask-create-button' \r\n                            floated='right'\r\n                            onClick={this.getUpdatedTask}\r\n                            >Create</Button>          \r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )    \r\n    }\r\n} \r\n\r\n\r\nexport default UpdateFormButton ;\r\n\r\n\r\n","import React from 'react';\r\nimport UpdateFormButton from '../updateFormButton/UpdateFormButton';\r\nimport { Item, Icon, Button, Checkbox } from 'semantic-ui-react';\r\nimport './task.css';\r\n\r\nconst Task = ({targetTask, tasks, getTaskId, deleteTask, updateTask}) => {\r\n    const monthes = [\"January\", \"February\", \"March\", \r\n        \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \r\n        \"October\", \"November\", \"December\"];\r\n    \r\n    return(\r\n        tasks.map((task) => {\r\n            const monthNumber= +task.date.slice(6, 8);\r\n            const month = monthes[monthNumber -1];\r\n            const date = `${task.date.slice(9, 11)} ${month} ${task.date.slice(1, 5)} ${task.date.slice(12)}`\r\n            return <Item id='task-container' key={task._id}>\r\n                <Item.Content id='task-content'>\r\n                   {task.completed && <span id='task-checked'><Icon color='green' name='check' />Completed</span>} \r\n                    <Item.Description id='task-priority'>Priority: {task.priority}</Item.Description>\r\n                    <Item.Header id='task-title'>{task.title}</Item.Header> \r\n                    <Item.Description>{task.text}</Item.Description>\r\n                    <Item.Extra>{date}</Item.Extra>\r\n                    <Item.Extra id='task-buttons'>\r\n                        <Checkbox label='Completed'\r\n                        onChange={() => getTaskId(task._id)}\r\n                        />\r\n                        <UpdateFormButton\r\n                        id='task-updateformbutton'\r\n                        task = {task}\r\n                        targetTask = {targetTask}\r\n                        updateTask = {updateTask}\r\n                        />\r\n                        <Button\r\n                        floated='right'\r\n                        id='task-button-delete'\r\n                        onClick={() => deleteTask(task._id)}  \r\n                        >Delete</Button>\r\n                    </Item.Extra>\r\n                </Item.Content>\r\n            </Item>\r\n        }) \r\n    )\r\n} \r\n\r\nexport default Task","import React, {Component} from 'react';\r\nimport './createTaskForm.css';\r\nimport { Button, Form, Modal, Radio } from 'semantic-ui-react';\r\n\r\n\r\nclass CreateTaskForm extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            title: '',\r\n            text: '',\r\n            priority: '',\r\n            completed: false,\r\n            open: false\r\n        }   \r\n    };\r\n   \r\n    changeTitleValue = title => this.setState({title});\r\n    changeDescriptionValue = text => this.setState({text});\r\n    handleChange = priority =>  this.setState({priority});\r\n    postState = () => {\r\n        this.props.getState(this.state);\r\n        this.setState({open:false})\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <Modal trigger={<Button onClick={() => this.setState({open: true})}>New Task</Button>} id='createtaskform-container' open={this.state.open}>\r\n                <Modal.Header>Cteate new task</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <label>Title</label>\r\n                            <input\r\n                            onChange={e => this.changeTitleValue(e.target.value)}\r\n                            placeholder='Title'\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Description</label>\r\n                            <textarea\r\n                            onChange={e => this.changeDescriptionValue(e.target.value)}\r\n                            placeholder='Description'\r\n                            ></textarea>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            Select task priority\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='Low'\r\n                            name='radioGroup'\r\n                            value='low'\r\n                            checked={this.state.priority === 'low'}\r\n                            onChange={() => this.handleChange('low')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='Medium'\r\n                            name='radioGroup'\r\n                            value='medium'\r\n                            checked={this.state.priority === 'medium'}\r\n                            onChange={() => this.handleChange('medium')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Radio\r\n                            label='High'\r\n                            name='radioGroup'\r\n                            value='high'\r\n                            checked={this.state.priority === 'high'}\r\n                            onChange={() => this.handleChange('high')}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Button \r\n                            id='createtask-cancel-button' \r\n                            floated='right'\r\n                            onClick={() => this.setState({open: false})}\r\n                            >Cancel</Button>\r\n                            <Button \r\n                            type='submit' \r\n                            id='createtask-create-button' \r\n                            floated='right'\r\n                            onClick={this.postState}\r\n                            >Create</Button>          \r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )    \r\n    }\r\n} \r\n\r\n\r\nexport default CreateTaskForm;","import React from 'react';\r\nimport { Dropdown} from 'semantic-ui-react';\r\nimport './dropdownFilter.css';\r\n\r\nconst DropdownFilter = ({getValue}) => {\r\n    return(\r\n        <Dropdown text='Priority filter' icon='filter' floating labeled button className='icon'>\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item text='Show all tasks'  onClick={() => getValue('all')}/>  \r\n                <Dropdown.Item text='Show only tasks with low priority'  onClick={() => getValue('low')}/>\r\n                <Dropdown.Item text='Show only tasks with medium priority' onClick={() => getValue('medium')}/> \r\n                <Dropdown.Item text='Show only tasks with high priority' onClick={() => getValue('high')}/> \r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n} \r\n\r\nexport default DropdownFilter","import React from 'react';\r\nimport { Dropdown } from 'semantic-ui-react';\r\nimport './dropdownSort.css';\r\n\r\nconst DropdownSort = ({changeSortDirection}) => {\r\n    return(\r\n        <Dropdown text='Sort by date' icon='filter' floating labeled button className='icon'>\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item text='Sort' onClick={() => changeSortDirection()}/>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n} \r\n\r\nexport default DropdownSort","import React from 'react';\r\nimport CreateTaskForm from '../createTaskForm/CreateTaskForm';\r\nimport DropdownFilter from '../dropdownFilter/DropdownFilter';\r\nimport DropdownSort from '../dropdownSort/DropdownSort';\r\nimport './appMenu.css'\r\n\r\nconst AppMenu = ({getState, getValue, changeSortDirection}) => {\r\n    return(\r\n        <div id='menu-container'>\r\n            <DropdownFilter\r\n            getValue = {getValue}\r\n            />\r\n            <DropdownSort\r\n            changeSortDirection={changeSortDirection}\r\n            />\r\n            <CreateTaskForm \r\n            getState = {getState}\r\n            />\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default AppMenu","import React, { Component } from 'react';\r\nimport { Item} from 'semantic-ui-react';\r\nimport Header from './components/header/Header';\r\nimport Task from './components/task/Task';\r\nimport AppMenu from './components/appMenu/AppMenu';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    tasks: [],\r\n    filteredTasks: [],\r\n    targetTask: []\r\n  };\r\n  \r\n  fetchData = async () => {\r\n    const data = await fetch('http://192.168.0.103:3001/api/task');\r\n    const tasks = await data.json();\r\n    this.setState({\r\n      tasks\r\n    });\r\n  \r\n    this.getValue();\r\n  }; //app component\r\n\r\n  postData = async (formData) => {\r\n    const{title, text, priority, completed} = formData;\r\n    const time = new Date();\r\n    const localTime = time.toLocaleDateString();\r\n    const hours = time.getHours() < 10 ? '0' + time.getHours() : time.getHours();\r\n    const minutes = time.getMinutes() < 10 ? '0' + time.getMinutes() : time.getMinutes();\r\n    const days = localTime.slice(0, 2)\r\n    const months =  localTime.slice(3, 5)\r\n    const years = localTime.slice(6);\r\n    const date = ` ${years}.${months}.${days} ${hours}:${minutes}`;\r\n    console.log(date);\r\n    const data = {\r\n      title,\r\n      text,\r\n      priority,\r\n      date,\r\n      completed \r\n    };\r\n    const options = {\r\n      method: 'post',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    };\r\n    const res = await fetch('http://192.168.0.103:3001/api/task', options);\r\n    console.log(res)\r\n    this.fetchData()\r\n  }; // createtaskform component\r\n\r\n  deleteData = async (id) => {\r\n    const task = this.state.tasks.filter( task => {\r\n      return task._id === id\r\n    });\r\n    const options = {\r\n      method: 'delete',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(task)\r\n    };\r\n    const res = await fetch('http://192.168.0.103:3001/api/task', options);\r\n    console.log(res)\r\n    this.fetchData()\r\n  } //task component\r\n  \r\n  updateData = async (obj) => {\r\n    const options = {\r\n      method: 'put',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(obj)\r\n    };\r\n    const res = await fetch('http://192.168.0.103:3001/api/task', options);\r\n    console.log(res)\r\n    this.fetchData()\r\n  } \r\n\r\n  getValue = (value = 'all') => {\r\n    const tasksCopy = [...this.state.tasks];\r\n    if(value === 'all') {this.setState({filteredTasks: tasksCopy})\r\n      } else {\r\n      const filteredTasks = tasksCopy.filter( task => {\r\n        return task.priority === value\r\n      })\r\n      this.setState({filteredTasks})\r\n    }\r\n  } // handle filter by priority\r\n\r\n  changeSortDirection = () => {\r\n    const filteredTasksCopy = [...this.state.filteredTasks].sort((a, b) => a.date - b.date)\r\n    this.setState({filteredTasks: filteredTasksCopy.reverse()})\r\n  } // handle sort by date\r\n\r\n  completeChange = (id) => {\r\n    const tasksCopy = [...this.state.tasks];\r\n    tasksCopy.forEach((task) => {\r\n     if(task._id === id) task.completed = !task.completed;\r\n    });\r\n    this.setState({\r\n      tasks:tasksCopy\r\n    })\r\n  };  // task component\r\n \r\n  componentDidMount(){\r\n    this.fetchData()\r\n  };\r\n\r\n  render() {\r\n    const {filteredTasks, targetTask} = this.state\r\n    return (\r\n      <div className=\"app-container\">\r\n        <Header />     \r\n        <div className='tasks-container'>\r\n          <AppMenu\r\n          getState = {this.postData}\r\n          getValue = {this.getValue}\r\n          changeSortDirection={this.changeSortDirection}\r\n          />\r\n          <Item.Group>\r\n            <Task\r\n            targetTask = {targetTask}\r\n            tasks = {filteredTasks}\r\n            getTaskId = {this.completeChange}\r\n            deleteTask = {this.deleteData}\r\n            updateTask = {this.updateData}\r\n            />\r\n          </Item.Group>\r\n        </div>\r\n      </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}